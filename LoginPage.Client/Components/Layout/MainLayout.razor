@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsAuthPage())
{
    <div class="auth-page">
        @Body
    </div>
}
else
{
    <AuthorizeView>
        <Authorized>
            @Body
        </Authorized>
        <NotAuthorized>
            <div>Перенаправлення на логін...</div>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!IsAuthPage() && !authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login-register");
        }
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            var authState = await task;
            if (!authState.User.Identity.IsAuthenticated && !IsAuthPage())
            {
                Navigation.NavigateTo("/login-register");
            }

            StateHasChanged();
        });
    }

    private bool IsAuthPage()
    {
        var currentPath = new Uri(Navigation.Uri).LocalPath.ToLower();
        return currentPath == "/register" || currentPath == "/login-register";
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}

<style>
    .auth-page {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        width: 100%;
        padding: 1rem;
    }
</style>

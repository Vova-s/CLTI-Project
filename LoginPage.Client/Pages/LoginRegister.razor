@page "/login-register"
@page "/login"
@using Blazored.LocalStorage
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject CustomAuthStateProvider AuthProvider
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<!-- Login Page Markup -->
<div class="flex flex-col items-center justify-center min-h-screen w-full bg-gray-100">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-sm">
        <h2 class="text-2xl font-bold text-center mb-6">Login</h2>

        <!-- Email Input Field -->
        <div class="mb-4">
            <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email *</label>
            <input id="email" @bind="loginUser.Email"
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   placeholder="Enter your email" />
            @if (string.IsNullOrEmpty(loginUser.Email) && showValidation)
            {
                <div class="text-red-500 text-sm mt-1">Email is required</div>
            }
        </div>

        <!-- Password Input Field -->
        <div class="mb-4">
            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password *</label>
            <input id="password" @bind="loginUser.Password" type="password"
                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                   placeholder="Enter your password" />
            @if (string.IsNullOrEmpty(loginUser.Password) && showValidation)
            {
                <div class="text-red-500 text-sm mt-1">Password is required</div>
            }
        </div>

        <!-- Remember Me Checkbox -->
        <div class="flex items-center justify-between mb-4">
            <label for="rememberMe" class="flex items-center text-gray-600 text-sm">
                <input id="rememberMe" type="checkbox" @bind="rememberMe" class="mr-1" />
                Remember Me
            </label>
        </div>

        <!-- Login Button -->
        <button @onclick="HandleLoginClick"
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
            @if (isLoading)
            {
                <span>Processing...</span>
            }
            else
            {
                <span>Login</span>
            }
        </button>

        <!-- Sign Up Link -->
        <div class="mt-4 text-center text-sm text-gray-600">
            Don't have an account?
            <a href="/register" class="text-blue-500 hover:underline font-medium">Sign up</a>
        </div>

        <!-- Error Message Display -->
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-4 text-center text-red-500">@message</div>
        }
    </div>
</div>

@code {
    // Model representing the user's login credentials.
    public class LoginModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    // Holds the login form data.
    private LoginModel loginUser = new();

    // Stores error or status messages.
    private string message = string.Empty;

    // Flag to control the display of validation messages.
    private bool showValidation = false;

    // Indicator for the login process.
    private bool isLoading = false;

    // Tracks the state of the "Remember Me" checkbox.
    private bool rememberMe = false;

    // Flag to indicate if the component has rendered to safely call JS.
    private bool hasRendered = false;

    // JavaScript для виправлення URL після успішного входу
    private string fixUrlScript = @"
        function fixLoginRedirect() {
            if (window.location.pathname.includes('/login') || window.location.pathname.includes('/login-register')) {
                window.location.href = '/';
                return true;
            }
            return false;
        }
    ";

    /// <summary>
    /// Logs messages to the browser console safely, handling prerendering scenarios.
    /// </summary>
    /// <param name="message">Message to log.</param>
    /// <param name="args">Additional arguments to log.</param>
    private async Task SafeJsLogAsync(string message, params object[] args)
    {
        try
        {
            // Only invoke JavaScript if the component has rendered.
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("console.log", new object[] { message }.Concat(args).ToArray());
            }
            else
            {
                // Fallback to .NET logging during prerender.
                Console.WriteLine($"[JS Log skipped during prerender]: {message}");
            }
        }
        catch
        {
            // Suppress any JS errors during prerendering.
        }
    }

    /// <summary>
    /// Lifecycle method called after the component is rendered.
    /// Marks the component as rendered to enable safe JS invocation.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            await SafeJsLogAsync("Login component initialized");

            // Реєструємо JavaScript функцію для виправлення URL
            await JSRuntime.InvokeVoidAsync("eval", fixUrlScript);

            // Перевіряємо, якщо вже аутентифіковані, перенаправляємо на головну
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await JSRuntime.InvokeVoidAsync("fixLoginRedirect");
            }
        }
    }

    /// <summary>
    /// Validates the login form inputs.
    /// </summary>
    /// <returns>True if form is valid; otherwise, false.</returns>
    private bool ValidateForm()
    {
        // Enable validation messages.
        showValidation = true;

        // Ensure both email and password are provided.
        if (string.IsNullOrEmpty(loginUser.Email) || string.IsNullOrEmpty(loginUser.Password))
        {
            return false;
        }

        return true;
    }

    /// <summary>
    /// Handles the login button click event.
    /// Validates the form, attempts login, processes the response,
    /// updates authentication state, and navigates upon success.
    /// </summary>
    private async Task HandleLoginClick()
    {
        await SafeJsLogAsync("Login button clicked");

        // Validate the form; if invalid, log and exit.
        if (!ValidateForm())
        {
            await SafeJsLogAsync("Login validation failed");
            return;
        }

        try
        {
            // Indicate that the login process is in progress.
            isLoading = true;
            StateHasChanged(); // Update UI

            await SafeJsLogAsync("Attempting login with:", loginUser.Email);

            var response = await Http.PostAsJsonAsync($"api/account/login", loginUser);

            await SafeJsLogAsync("Login response status:", response.StatusCode);

            // Read the response content.
            var responseContent = await response.Content.ReadAsStringAsync();
            await SafeJsLogAsync("Login response content:", responseContent);

            if (response.IsSuccessStatusCode)
            {
                var token = responseContent;

                if (!string.IsNullOrWhiteSpace(token))
                {
                    await LocalStorage.SetItemAsync("authToken", token);
                    await AuthProvider.Login(token);

                    // Чіткий редирект на сторінку KPI після логіну
                    NavigationManager.NavigateTo("/kpi-page");
                }
                else
                {
                    message = "Authentication failed. No token received.";
                }
            }
            else
            {
                message = !string.IsNullOrWhiteSpace(responseContent) ? responseContent : "Invalid login credentials.";
                Console.WriteLine($"Login failed: {message}");
                await SafeJsLogAsync("Login failed:", message);
            }
        }
        catch (Exception ex)
        {
            message = "Error: " + ex.Message;
            Console.WriteLine($"Login exception: {ex.Message}");
            await SafeJsLogAsync("Login exception:", ex.Message);
        }
        finally
        {
            // Reset the loading indicator.
            isLoading = false;
            StateHasChanged();
        }
    }
}
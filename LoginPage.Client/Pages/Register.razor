@page "/register"
@layout EmptyLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<!-- TailwindCSS -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-sm">
        <h2 class="text-2xl font-bold text-center mb-6">Sign Up</h2>

        <EditForm Model="@userModel" OnValidSubmit="HandleSubmit" FormName="RegisterForm">
            <DataAnnotationsValidator />

            <!-- Поля вводу -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">First Name *</label>
                <InputText @bind-Value="userModel.FirstName" placeholder="Enter your first name"
                           class="shadow border rounded w-full py-2 px-3" />
                @if (!string.IsNullOrEmpty(firstNameError))
                {
                    <div class="text-red-500 text-sm mt-1">@firstNameError</div>
                }
                <ValidationMessage For="@(() => userModel.FirstName)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Last Name *</label>
                <InputText @bind-Value="userModel.LastName" placeholder="Enter your last name"
                           class="shadow border rounded w-full py-2 px-3" />
                @if (!string.IsNullOrEmpty(lastNameError))
                {
                    <div class="text-red-500 text-sm mt-1">@lastNameError</div>
                }
                <ValidationMessage For="@(() => userModel.LastName)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Email *</label>
                <InputText type="email" @bind-Value="userModel.Email" placeholder="Enter your email"
                           class="shadow border rounded w-full py-2 px-3" />
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <div class="text-red-500 text-sm mt-1">@emailError</div>
                }
                <ValidationMessage For="@(() => userModel.Email)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Password *</label>
                <InputText type="password" @bind-Value="userModel.Password" placeholder="Enter your password"
                           class="shadow border rounded w-full py-2 px-3" />
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <div class="text-red-500 text-sm mt-1">@passwordError</div>
                }
                <ValidationMessage For="@(() => userModel.Password)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Confirm Password *</label>
                <InputText type="password" @bind-Value="confirmPassword" placeholder="Confirm your password"
                           class="shadow border rounded w-full py-2 px-3" />
                @if (!string.IsNullOrEmpty(confirmPasswordError))
                {
                    <div class="text-red-500 text-sm mt-1">@confirmPasswordError</div>
                }
            </div>

            <!-- Кнопка сабміту -->
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
                Register
            </button>
        </EditForm>

        <!-- Повідомлення -->
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-4 text-center @(message.Contains("successfully") ? "text-green-500" : "text-red-500")">@message</div>
        }

        <!-- Посилання на логін -->
        <div class="mt-4 text-center text-sm text-gray-600">
            Already have an account?
            <a href="/login-register" class="text-blue-500 hover:underline font-medium">Login</a>
        </div>
    </div>
</div>

@code {
    private RegisterModel userModel = new();
    private string? confirmPassword;
    private string? message;

    // Поле для помилок валідації
    private string? firstNameError;
    private string? lastNameError;
    private string? emailError;
    private string? passwordError;
    private string? confirmPasswordError;

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        public string? FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        public string? LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long.", MinimumLength = 6)]
        public string? Password { get; set; }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine("HandleSubmit викликано");

        // Скидання повідомлень про помилки
        firstNameError = lastNameError = emailError = passwordError = confirmPasswordError = null;
        message = null;

        // Перевірка на співпадіння паролів
        if (userModel.Password != confirmPassword)
        {
            confirmPasswordError = "Passwords do not match.";
            return;
        }

        Console.WriteLine("Валідація пройшла, надсилаємо POST запит");

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7227/api/account/register", userModel);
            if (response.IsSuccessStatusCode)
            {
                message = "User successfully registered!";
                await Task.Delay(1500);
                Navigation.NavigateTo("/login-register");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = !string.IsNullOrWhiteSpace(error) ? error : "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            message = "Error: " + ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }
}
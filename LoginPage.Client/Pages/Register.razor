@page "/register"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations

<!-- Tailwind CSS -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<!-- Registration Form Layout -->
<div class="flex flex-col items-center justify-center min-h-screen w-full bg-gray-100">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-sm">
        <h2 class="text-2xl font-bold text-center mb-6">Sign Up</h2>

        <!-- Registration Form Content -->
        <div>
            <!-- First Name Input Field -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">First Name *</label>
                <input @bind="userModel.FirstName"
                       placeholder="Enter your first name"
                       class="shadow border rounded w-full py-2 px-3" />
                @if (string.IsNullOrEmpty(userModel.FirstName) && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">First name is required</div>
                }
            </div>

            <!-- Last Name Input Field -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Last Name *</label>
                <input @bind="userModel.LastName"
                       placeholder="Enter your last name"
                       class="shadow border rounded w-full py-2 px-3" />
                @if (string.IsNullOrEmpty(userModel.LastName) && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">Last name is required</div>
                }
            </div>

            <!-- Email Input Field -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Email *</label>
                <input type="email" @bind="userModel.Email"
                       placeholder="Enter your email"
                       class="shadow border rounded w-full py-2 px-3" />
                @if (string.IsNullOrEmpty(userModel.Email) && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">Email is required</div>
                }
                @if (!string.IsNullOrEmpty(userModel.Email) && !IsValidEmail(userModel.Email) && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">Email format is invalid</div>
                }
            </div>

            <!-- Password Input Field -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Password *</label>
                <input type="password" @bind="userModel.Password"
                       placeholder="Enter your password"
                       class="shadow border rounded w-full py-2 px-3" />
                @if (string.IsNullOrEmpty(userModel.Password) && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">Password is required</div>
                }
                @if (!string.IsNullOrEmpty(userModel.Password) && userModel.Password.Length < 6 && showValidation)
                {
                    <div class="text-red-500 text-sm mt-1">Password must be at least 6 characters</div>
                }
            </div>

            <!-- Confirm Password Input Field -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-1">Confirm Password *</label>
                <input type="password" @bind="confirmPassword"
                       placeholder="Confirm your password"
                       class="shadow border rounded w-full py-2 px-3" />
                @if (userModel.Password != confirmPassword && showValidation && !string.IsNullOrEmpty(confirmPassword))
                {
                    <div class="text-red-500 text-sm mt-1">Passwords do not match</div>
                }
            </div>

            <!-- Register Button (non-submit) -->
            <button type="button" @onclick="HandleRegisterClick"
                    class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
                Register
            </button>
        </div>

        <!-- Display Status or Error Message -->
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-4 text-center @(message.Contains("successfully") ? "text-green-500" : "text-red-500")">
                @message
            </div>
        }

        <!-- Loading Indicator -->
        @if (isLoading)
        {
            <div class="mt-4 text-center text-blue-500">
                <span class="inline-block animate-spin mr-2">⟳</span> Processing...
            </div>
        }

        <!-- Link to Login Page -->
        <div class="mt-4 text-center text-sm text-gray-600">
            Already have an account?
            <a href="/login-register" class="text-blue-500 hover:underline font-medium">Login</a>
        </div>
    </div>
</div>

@code {
    // Model for registration form data.
    private RegisterModel userModel = new();
    private string? confirmPassword;
    private string? message;
    private bool showValidation = false;
    private bool isLoading = false;
    private bool hasRendered = false;

    public class RegisterModel
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
        public string? Password { get; set; }
    }

    private async Task SafeJsLogAsync(string logMessage, params object[] args)
    {
        try
        {
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("console.log", new object[] { logMessage }.Concat(args).ToArray());
            }
            else
            {
                Console.WriteLine($"[JS Log skipped during prerender]: {logMessage}");
            }
        }
        catch
        {
            // Suppress JS errors during prerendering
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            await SafeJsLogAsync("Register component initialized");
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool ValidateForm()
    {
        showValidation = true;

        if (string.IsNullOrEmpty(userModel.FirstName) ||
            string.IsNullOrEmpty(userModel.LastName) ||
            string.IsNullOrEmpty(userModel.Email) ||
            string.IsNullOrEmpty(userModel.Password) ||
            userModel.Password != confirmPassword ||
            !IsValidEmail(userModel.Email) ||
            userModel.Password.Length < 6)
        {
            return false;
        }
        return true;
    }

    private async Task HandleRegisterClick()
    {
        await SafeJsLogAsync("Register button clicked");

        if (!ValidateForm())
        {
            await SafeJsLogAsync("Form validation failed");
            return;
        }

        try
        {
            isLoading = true;
            await SafeJsLogAsync("Sending registration data", userModel);

            var baseUri = Navigation.BaseUri;
            var response = await Http.PostAsJsonAsync($"{baseUri}api/account/register", userModel);

            await SafeJsLogAsync("Response status:", response.StatusCode);

            var responseContent = await response.Content.ReadAsStringAsync();
            await SafeJsLogAsync("Response content:", responseContent);

            if (response.IsSuccessStatusCode)
            {
                message = "User successfully registered!";
                await SafeJsLogAsync("Registration successful");

                // Brief delay before redirect
                await Task.Delay(1500);
                Navigation.NavigateTo("/login-register");
            }
            else
            {
                message = !string.IsNullOrEmpty(responseContent)
                    ? responseContent
                    : "Registration failed";
                await SafeJsLogAsync("Registration failed:", message);
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Console.WriteLine($"Registration exception: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            await SafeJsLogAsync("Registration exception:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
